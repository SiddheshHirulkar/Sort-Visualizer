{"version":3,"sources":["components/Navbar.js","components/SortContent.js","App.js","utils/generateArray.js","utils/sortAlgos.js","serviceWorker.js","index.js"],"names":["Navbar","generateNewArray","sortArray","className","alt","src","htmlFor","name","id","value","onClick","SortContent","newArrayOfNum","renderArray","length","map","num","style","height","App","useState","arrayForSort","setArrayForSort","isSorting","setIsSorting","isNewArray","setIsNewArray","ijRef","useRef","i","j","useEffect","setNewArray","myArray","newArrayElement","Math","random","createNewPercentage","multiplier","trunc","addNumbers","push","createNewArray","ij","current","newArray","arrayLength","isSwapped","setTimeout","bubbleSort","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f2c67da.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = ({ generateNewArray, sortArray }) => {\n    return(\n        <div>\n            <header>\n                <nav className=\"navbar\">\n                    <div className=\"navbar__header\">Sort Visualizer</div>\n                    <img alt=\"icon\" src=\"ascending-sort.png\" className=\"navbar__header-icon\" />\n                    <div className=\"navbar__tab\">\n                        <label htmlFor=\"algo-type\" className=\"navbar__tab-label\">Sort Algorithm :</label>\n                        <select name=\"algos\" id=\"algo-type\" className=\"navbar__tab-select\">\n                            <option className=\"navbar__tab-select-option\" value=\"bubble sort\">Bubble Sort</option>\n                        </select>\n                    </div>\n                    <div className=\"navbar__buttons\">\n                        <button \n                            className=\"btn navbar__gen-array\"\n                            onClick={generateNewArray}    \n                        >Generate New Array</button>\n                        <button \n                            className=\"btn navbar__sort\"\n                            onClick={sortArray}\n                        >Sort</button>\n                    </div>\n                </nav>\n            </header>\n        </div>\n    );\n}\n\nexport default Navbar;","import React from 'react';\n\nconst SortContent = ({ newArrayOfNum }) => {\n    const renderArray = newArrayOfNum.length ? (\n        newArrayOfNum.map((num) => {\n            return(\n                <li style={{height:`${num}px`}} className=\"sort__bar-array-items\"></li>    \n            )\n        })\n    ) : (\n        <div>\n            <li style={{height:\"30px\"}} className=\"sort__bar-array-items\"></li>\n            <li style={{height:\"10px\"}} className=\"sort__bar-array-items\"></li>\n            <li style={{height:\"25px\"}} className=\"sort__bar-array-items\"></li>\n            <li style={{height:\"44px\"}} className=\"sort__bar-array-items\"></li>\n            <li style={{height:\"13px\"}} className=\"sort__bar-array-items\"></li>\n            <li style={{height:\"50px\"}} className=\"sort__bar-array-items\"></li>\n            <li style={{height:\"48px\"}} className=\"sort__bar-array-items\"></li>\n        </div>\n\n    )\n    \n    return(\n        <div>\n            <main className=\"sort\">\n                <div className=\"sort__bar\">\n                    <ul className=\"sort__bar-array\">\n                        {renderArray}\n                    </ul>\n                </div>\n            </main>\n        </div>\n    );\n}\n\nexport default SortContent;","import React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\n\nimport Navbar from './components/Navbar';\nimport SortContent from './components/SortContent';\nimport { createNewArray } from './utils/generateArray';\nimport { bubbleSort } from './utils/sortAlgos';\n\nconst App = () => {\n  // Variable Declaration\n\n  // const [newArrayOfNum, setNewArrayOfNum] = useState([44, 3, 12, 33, 66, 234, 55]);\n  const [arrayForSort, setArrayForSort] = useState([44, 3, 12, 33, 66, 234, 55]);\n  const [isSorting, setIsSorting] = useState(false);\n  const [isNewArray, setIsNewArray] = useState(false);\n  const ijRef = useRef({ i:0, j:0 });\n\n  useEffect(() => {\n\n    // Creates new Array through auxillary function createNewArray\n    if(isNewArray) {  \n      createNewArray(setArrayForSort);  \n      setIsNewArray(false);\n    }\n    \n    // Checks if user has clicked sort button and then sorts the array using algorithm selected by the user\n    if(isSorting) {\n\n      // Algorithm for bubble sort\n      bubbleSort(ijRef, arrayForSort, setArrayForSort);\n    }\n    \n  },[arrayForSort, setArrayForSort, isSorting, ijRef, isNewArray]);\n\n  // generates new array of random elements using auxillary function generateArray()\n  const generateNewArray = () => {\n    setIsSorting(false);\n    setIsNewArray(true);\n  }\n\n  // Sorts the array using the algorithm selected by the end user\n  const sortArray = () => {\n    ijRef.current.i = 0;\n    ijRef.current.j = 0;\n    setIsSorting(true);\n  }\n\n  return(\n    <div>\n      <Navbar \n        generateNewArray={generateNewArray} \n        sortArray={sortArray}\n      />\n      <SortContent newArrayOfNum={arrayForSort} />\n    </div>\n  );\n}\n\nexport default App;","export const createNewArray = (setNewArray) => {\n    let myArray = [];\n    \n    // Creates 2, 3 and single digit elements for array\n    for(let i=1; i<=50; i++) {\n        let newArrayElement = Math.random();\n\n        const createNewPercentage = (multiplier) => {\n            let percentageValue = 0;\n            let newPercentageValue = 0;\n            \n            newArrayElement = newArrayElement * multiplier;\n            newArrayElement = Math.trunc(newArrayElement);\n            percentageValue = ((newArrayElement/10));\n            newPercentageValue = percentageValue * 5;\n            \n            return newPercentageValue;\n        }\n\n        if(i%4 === 0) {\n            let addNumbers = createNewPercentage(100);\n            myArray.push(addNumbers);\n\n        } else if(i%5 === 0) {\n            let addNumbers = createNewPercentage(1000);\n            myArray.push(addNumbers);\n\n        } else if(i%3 === 0) {\n            let addNumbers = createNewPercentage(10);\n            myArray.push(addNumbers);\n\n        } else if(i%2 === 0) {\n            let addNumbers = createNewPercentage(100);\n            myArray.push(addNumbers);\n\n        } else {\n            let addNumbers = createNewPercentage(1000);\n            myArray.push(addNumbers);\n        }\n    }\n    setNewArray(myArray);\n}","// This file contains all the tyes of alogrithms used for sorting the array\n\n// Algorithm for bubble sort\nexport const bubbleSort = (ijRef, arrayForSort, setArrayForSort) => {\n\n    // Variable declaration for the bubble sort\n    const ij = ijRef.current;\n    const i = ij.i;\n    const j = ij.j;\n    const newArray = [...arrayForSort];\n    const arrayLength = newArray.length;\n    let isSwapped = false;\n\n    // bubble sort algorithm\n    if(newArray[j] > newArray[j+1]) {\n        [newArray[j], newArray[j+1]] = [newArray[j+1], newArray[j]];\n        isSwapped = true;\n    }\n\n    // loop for bubble sort\n    if(j < arrayLength - i) {\n        ij.j++;\n    } else if(ij.i < arrayLength) {\n        ij.j = 0;\n        ij.i++;\n    }\n\n    // this will trigger the next render\n    // and the loop will continue untill ij.i < n\n    setTimeout(() => {\n        if(ij.i >= arrayLength) {\n            isSwapped = false;\n        }\n        setArrayForSort(newArray);\n    }, isSwapped ? 10 : 0);\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}